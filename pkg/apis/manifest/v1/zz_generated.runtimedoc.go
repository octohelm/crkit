/*
Package v1 GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package v1

func (v *DockerManifest) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "MediaType":
			return []string{
				"specifies the type of this document data structure e.g. `application/vnd.oci.image.manifest.v1+json`",
			}, true
		case "ArtifactType":
			return []string{
				"specifies the IANA media type of artifact when the manifest is used for an artifact.",
			}, true
		case "Config":
			return []string{
				"references a configuration object for a container, by digest.",
				"The referenced configuration object is a JSON blob that the runtime uses to set up the container.",
			}, true
		case "Layers":
			return []string{
				"is an indexed list of layers referenced by the manifest.",
			}, true
		case "Subject":
			return []string{
				"is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
			}, true
		case "Annotations":
			return []string{
				"contains arbitrary metadata for the image manifest.",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Versioned, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *DockerManifestList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "MediaType":
			return []string{
				"specifies the type of this document data structure e.g. `application/vnd.oci.image.index.v1+json`",
			}, true
		case "ArtifactType":
			return []string{
				"specifies the IANA media type of artifact when the manifest is used for an artifact.",
			}, true
		case "Manifests":
			return []string{
				"references platform specific manifests.",
			}, true
		case "Subject":
			return []string{
				"is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
			}, true
		case "Annotations":
			return []string{
				"contains arbitrary metadata for the image index.",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Versioned, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OciIndex) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "MediaType":
			return []string{
				"specifies the type of this document data structure e.g. `application/vnd.oci.image.index.v1+json`",
			}, true
		case "ArtifactType":
			return []string{
				"specifies the IANA media type of artifact when the manifest is used for an artifact.",
			}, true
		case "Manifests":
			return []string{
				"references platform specific manifests.",
			}, true
		case "Subject":
			return []string{
				"is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
			}, true
		case "Annotations":
			return []string{
				"contains arbitrary metadata for the image index.",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Versioned, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OciManifest) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "MediaType":
			return []string{
				"specifies the type of this document data structure e.g. `application/vnd.oci.image.manifest.v1+json`",
			}, true
		case "ArtifactType":
			return []string{
				"specifies the IANA media type of artifact when the manifest is used for an artifact.",
			}, true
		case "Config":
			return []string{
				"references a configuration object for a container, by digest.",
				"The referenced configuration object is a JSON blob that the runtime uses to set up the container.",
			}, true
		case "Layers":
			return []string{
				"is an indexed list of layers referenced by the manifest.",
			}, true
		case "Subject":
			return []string{
				"is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
			}, true
		case "Annotations":
			return []string{
				"contains arbitrary metadata for the image manifest.",
			}, true

		}
		if doc, ok := runtimeDoc(&v.Versioned, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Payload) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.Manifest, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
