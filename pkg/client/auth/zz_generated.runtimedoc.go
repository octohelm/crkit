/*
Package auth GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package auth

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v APIVersion) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{
				"Type refers to the name of a specific API specification",
				"such as \"registry\"",
			}, true
		case "Version":
			return []string{
				"Version is the version of the API specification implemented,",
				"This may omit the revision number and only include",
				"the major and minor version, such as \"2.0\"",
			}, true

		}

		return nil, false
	}
	return []string{
		"APIVersion represents a version of an API including its",
		"type and version number.",
	}, true
}

func (v RegistryScope) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{}, true
		case "Actions":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"RegistryScope represents a token scope for access",
		"to resources in the registry.",
	}, true
}

func (v RemoteRegistry) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Endpoint":
			return []string{
				"Remote container registry endpoint",
			}, true
		case "Username":
			return []string{
				"Remote container registry username",
			}, true
		case "Password":
			return []string{
				"Remote container registry password",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v RepositoryScope) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Repository":
			return []string{}, true
		case "Class":
			return []string{}, true
		case "Actions":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"RepositoryScope represents a token scope for access",
		"to a repository.",
	}, true
}

func (v TokenHandlerOptions) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Transport":
			return []string{}, true
		case "Credentials":
			return []string{}, true
		case "OfflineAccess":
			return []string{}, true
		case "ForceOAuth":
			return []string{}, true
		case "ClientID":
			return []string{}, true
		case "Scopes":
			return []string{}, true
		case "Logger":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"TokenHandlerOptions is used to configure a new token handler",
	}, true
}
