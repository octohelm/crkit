/*
Package client GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package client

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v UnexpectedHTTPResponseError) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ParseErr":
			return []string{}, true
		case "StatusCode":
			return []string{}, true
		case "Response":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"UnexpectedHTTPResponseError is returned when an expected HTTP status code",
		"is returned, but the content was unexpected and failed to be parsed.",
	}, true
}

func (v UnexpectedHTTPStatusError) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Status":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"UnexpectedHTTPStatusError is returned when an unexpected HTTP status is",
		"returned when making a registry api call.",
	}, true
}
