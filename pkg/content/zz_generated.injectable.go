/*
Package content GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package content

import (
	context "context"
)

type contextNamespace struct{}

func NamespaceFromContext(ctx context.Context) (Namespace, bool) {
	if v, ok := ctx.Value(contextNamespace{}).(Namespace); ok {
		return v, true
	}
	return nil, false
}

func NamespaceInjectContext(ctx context.Context, tpe Namespace) context.Context {
	return context.WithValue(ctx, contextNamespace{}, tpe)
}

type contextRepository struct{}

func RepositoryFromContext(ctx context.Context) (Repository, bool) {
	if v, ok := ctx.Value(contextRepository{}).(Repository); ok {
		return v, true
	}
	return nil, false
}

func RepositoryInjectContext(ctx context.Context, tpe Repository) context.Context {
	return context.WithValue(ctx, contextRepository{}, tpe)
}
