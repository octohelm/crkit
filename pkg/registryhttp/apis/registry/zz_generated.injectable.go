/*
Package registry GENERATED BY gengo:injectable 
DON'T EDIT THIS FILE
*/
package registry

import (
	context "context"
	fmt "fmt"

	content "github.com/octohelm/crkit/pkg/content"
	uploadcache "github.com/octohelm/crkit/pkg/uploadcache"
)

func (v *CancelUploadBlob) Init(ctx context.Context) error {
	if value, ok := uploadcache.UploadCacheFromContext(ctx); ok {
		v.uploadCache = value
	} else {
		return fmt.Errorf("missing provider %T", v.uploadCache)
	}

	if err := v.NameScoped.Init(ctx); err != nil {
		return err
	}

	return nil
}

func (v *NameScoped) Init(ctx context.Context) error {
	if value, ok := content.NamespaceFromContext(ctx); ok {
		v.namespace = value
	} else {
		return fmt.Errorf("missing provider %T", v.namespace)
	}

	return nil
}

func (v *UploadBlob) Init(ctx context.Context) error {
	if value, ok := uploadcache.UploadCacheFromContext(ctx); ok {
		v.uploadCache = value
	} else {
		return fmt.Errorf("missing provider %T", v.uploadCache)
	}

	if err := v.NameScoped.Init(ctx); err != nil {
		return err
	}

	return nil
}

func (v *UploadPatchBlob) Init(ctx context.Context) error {
	if value, ok := uploadcache.UploadCacheFromContext(ctx); ok {
		v.uploadCache = value
	} else {
		return fmt.Errorf("missing provider %T", v.uploadCache)
	}

	if err := v.NameScoped.Init(ctx); err != nil {
		return err
	}

	return nil
}

func (v *UploadPutBlob) Init(ctx context.Context) error {
	if value, ok := uploadcache.UploadCacheFromContext(ctx); ok {
		v.uploadCache = value
	} else {
		return fmt.Errorf("missing provider %T", v.uploadCache)
	}

	if err := v.NameScoped.Init(ctx); err != nil {
		return err
	}

	return nil
}
